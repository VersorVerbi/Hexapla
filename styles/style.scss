@use "sass:map";
@use "sass:list";
@use "sass:math";
@function intdiv($dividend, $divisor) {
  $returnUnits: $dividend / no-units($dividend); // 1 units, e.g., 1px, 1em
  $dividend: no-units($dividend);
  $divisor: no-units($divisor);
  @return math.floor($dividend / $divisor) * $returnUnits;
}
@function no-units($value) {
  @if (not unitless($value)) {
    @return $value / ($value * 0 + 1);
  } @else {
    @return $value;
  }
}
$effectivelyMaxInt: 2147483647;

//#region Theme Establishment
$borderColor: black;
$searchPlaceholderColor: #555;
$warningBorder: darkred;
$darkLinks: #a9b8d4;
$lightLinks: #001fc5;

@mixin colors($colorMap) {
  background-color: map.get($colorMap, 'background');
  color: map.get($colorMap, 'fontColor');

  a {
    color: map.get($colorMap, 'links');
  }

  #wrap {
    background-color: map.get($colorMap, 'siteBackground');
  }

  .search {
    border-color: map.get($colorMap, 'searchBorderColor');
  }

  #searchbox::placeholder {
    color: map.get($colorMap, 'searchPlaceholderColor');
  }

  .menu-tab {
    background-color: map.get($colorMap, 'menuColor');
    border-color: map.get($colorMap, 'menuBorderColor');

    .activator {
      border-right-color: map.get($colorMap, 'menuColor');
    }
  }

  .sidebar {
    background-color: map.get($colorMap, 'menuColor');
    color: map.get($colorMap, 'menuFontColor');
    border-color: map.get($colorMap, 'menuBorderColor');

    a {
      color: map.get($colorMap, 'menuFontColor');

      &:hover, &:visited, &:active {
        color: map.get($colorMap, 'menuFontColor');
      }
    }
  }

  #menu ul li {
    background-color: map.get($colorMap, 'menuColor');

    &:hover {
      background-color: map.get($colorMap, 'menuButtonHoverColor');
    }
  }

  div.del span, div.promote span, #addtl span, #prevPsg span, #nextPsg span {
    border-color: map.get($colorMap, 'translationBorder');
    background-color: map.get($colorMap, 'translationBg');
  }

  .popup {
    background-color: map.get($colorMap, 'modalBg');
    border-color: map.get($colorMap, 'modalBorder');
  }

  [class *= " icofont-"],[class ^= "icofont-"] {
    color: map.get($colorMap, 'buttonFontColor');
  }

  #loading {
    background-color: map.get($colorMap, 'loadBg');
  }

  .of2 .hovered, .of3 .hovered, .of4 .hovered, .of5 .hovered, .of6 .hovered {
    background-color: map.get($colorMap, 'sameHover');
    color: map.get($colorMap, 'sameHoverFont');
  }
}

@mixin highlights($highlightMap) {
  @if ($highlightMap) {
    @each $i, $color in $highlightMap {
      .diff#{$i}L, .diff#{$i}R {
        background-color: map.get($highlightMap, $i);
      }

      @for $j from 2 through 6 {
        @if $j != $i {
          .diff#{$i}L .diff#{$j}L, .diff#{$j}L .diff#{$i}L {
            background-color: linear-gradient(to right, map.get($highlightMap, $i), map.get($highlightMap, $j));
          }

          @for $k from 2 through 6 {
            $ij: $i, $j;
            @if not list.index($ij, $k) {
              .diff#{$i}L .diff#{$j}L .diff#{$k}L {
                background-color: linear-gradient(to right, map.get($highlightMap, $i), map.get($highlightMap, $j), map.get($highlightMap, $k));
              }

              @for $l from 2 through 6 {
                $ijk: $i, $j, $k;
                @if not list.index($ijk, $l) {
                  .diff#{$i}L .diff#{$j}L .diff#{$k}L .diff#{$l}L {
                    background-color: linear-gradient(to right, map.get($highlightMap, $i), map.get($highlightMap, $j), map.get($highlightMap, $k), map.get($highlightMap, $l));
                  }

                  @for $m from 2 through 6 {
                    $ijkl: $i, $j, $k, $l;
                    @if not list.index($ijkl, $m) {
                      .diff#{$i}L .diff#{$j}L .diff#{$k}L .diff#{$l}L .diff#{$m}L {
                        background-color: linear-gradient(to right, map.get($highlightMap, $i), map.get($highlightMap, $j), map.get($highlightMap, $k), map.get($highlightMap, $l), map.get($highlightMap, $m));
                      }

                      @for $n from 2 through 6 {
                        $ijklm: $i, $j, $k, $l, $m;
                        @if not list.index($ijklm, $n) {
                          .diff#{$i}L .diff#{$j}L .diff#{$k}L .diff#{$l}L .diff#{$m}L .diff#{$n}L {
                            background-color: linear-gradient(to right, map.get($highlightMap, $i), map.get($highlightMap, $j), map.get($highlightMap, $k), map.get($highlightMap, $l), map.get($highlightMap, $m), map.get($highlightMap, $n));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } @else {
    // high-contrast / color blind settings here
  }
}

@mixin verticalAlign($position: absolute) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
  -ms-transform: translateY(-50%); // IE
  -moz-transform: translateY(-50%); // Firefox
  -webkit-transform: translateY(-50%); // Safari and Chrome
  -o-transform: translateY(-50%);
}

body {
  &.dark {
    $colorMap: ('background': $themeSource, 'siteBackground': rgba($dark1-5, 0.9),
                 'searchBorderColor': $borderColor, 'searchPlaceholderColor': $searchPlaceholderColor,
                 'menuColor': $dark2, 'menuBorderColor': $dark15, 'menuFontColor': $dark15,
                 'menuButtonHoverColor': $dark3, 'translationBorder': $dark10, 'translationBg': $dark2,
                 'modalBg': $dark3, 'modalBorder': $dark15, 'fontColor': $dark15, 'buttonFontColor': $dark1-5,
                 'loadBg': rgba($dark15, 0.7), 'links': $darkLinks, 'sameHover': $dark15, 'sameHoverFont': $dark1-5);
    @include colors($colorMap);

    $highlightMap: (2: #45632f, 3: #495d6b, 4: #755426, 5: #6b5559, 6: #5c5d2e);
    @include highlights($highlightMap);
  }

  &.light {
    $colorMap: ('background': $themeSource, 'siteBackground': rgba($light1-5, 0.9),
            'searchBorderColor': $borderColor, 'searchPlaceholderColor': $searchPlaceholderColor,
            'menuColor': $light2, 'menuBorderColor': $light15, 'menuFontColor': $light15,
            'menuButtonHoverColor': $light3, 'translationBorder': $light10, 'translationBg': $light2,
            'modalBg': $light3, 'modalBorder': $light15, 'fontColor': $light15, 'buttonFontColor': $light15,
            'loadBg': rgba($light15, 0.7), 'links': $lightLinks, 'sameHover': $light15, 'sameHoverFont': $light1-5);
    @include colors($colorMap);

    $highlightMap: (2: #70c531, 3: #7cb7dc, 4: #f29e0f, 5: #d6a3ac, 6: #b5b634);
    @include highlights($highlightMap);
  }

  &.cvd {
    @include highlights(null);
  }
}
//#endregion

//#region Site/Page variables
$siteWidth: 1280px;
$siteHeight: 95%;
$sitePadding: 40px;
$siteBottomPadding: 5px;

$pageWidth: 95%;
$pageMargin: 50px;
//#endregion

//#region Header / Nav / Search
$headerWidth: 60%;
$headerSize: 1.5em;
$headerBigMargin: 10px;
$headerLittleMargin: 5px;
$headerHeight: 90px;

$searchHeight: 30px;
$searchPadding: 5px;
$searchBorderWidth: 1px;
$searchButtonWidth: 35px;
$searchButtonMargin: 5px;
//#endregion

//#region Menu variables
$menuBorderWidth: 1px;

$tabSize: 40px;
$tabIconSize: intdiv($tabSize, 2);
$tabIconPosition: $tabSize - $tabIconSize;
$tabRightOffset: 1px;
$tabBorderRadius: 5px;
$tabTopSpace: 8px;
$tabBetweenSpace: intdiv($tabTopSpace, 2);
$tabSpaceToNextTop: #{$tabSize + $tabBetweenSpace + (2 * $menuBorderWidth)};
$tabDictPosition: #{$tabTopSpace + $tabSpaceToNextTop};
$tabRefsPosition: #{$tabDictPosition + $tabSpaceToNextTop};

$sidebarWidth: 300px;
$sidebarTopPadding: 1em;
$sidebarBottomSpace: 20px;
$sidebarBottomSize: 30px;
$sidebarBottomMargin: #{$sidebarBottomSpace + $sidebarBottomSize};
$sidebarLeftPadding: 20px;

$menuListWidth: #{$sidebarWidth - $sidebarLeftPadding};
$menuListItemBigSpace: 5px;
$menuListItemLittleSpace: 2px;
$menuChangeTime: 1s;
$menuButtonChangeTime: 0.25s;

$menuButtonZIndex: #{$effectivelyMaxInt - 1};
$menuTabZIndex: #{$menuButtonZIndex - 1};
$menuActivatedZIndex: #{$menuTabZIndex - 1};
$menuDeactivatedZIndex: #{$menuActivatedZIndex - 1};
//#endregion

//#region Popup variables
$popupWidth: 750px;
$popupHeight: 425px;
$popupBorderRadius: 10px;
$tboxGridBoxPadding: 10px;
//#endregion

//#region Body variables
$sectionPadding: 5px;
$noticeLeftMargin: -6px;
$noticeBottomMargin: -$sectionPadding;
//#endregion

//#region Main tags
body {
  padding: 0;
  margin: 0;
  width: 100%;
  background-repeat: no-repeat;
  background-position: 0 $backgroundTop;
  background-size: cover;
  min-height: 100%;
  font-family: 'Droid Serif', serif;
  overflow: hidden;
}

#wrap {
  position: relative;
  width: $siteWidth;
  min-height: $siteHeight;
  border: none;
  padding: $sitePadding $sitePadding $siteBottomPadding $sitePadding;
  margin: auto;
  overflow: auto;
}

#page {
  margin: $pageMargin auto;
  width: $pageWidth;

  &.results {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: start;
    justify-content: center;
    margin: $pageMargin auto 0 auto;
  }

  h3 {
    margin: $headerBigMargin auto $headerLittleMargin auto;
    width: $headerWidth;
  }
}
//#endregion

//#region Header
h3 {
  margin: 0 0 20px 0;
  font-size: $headerSize;
}

h4 {
  margin: $headerLittleMargin 0 0 0;
}

.search {
  height: $searchHeight;
  padding-right: $searchPadding;
  border: $searchBorderWidth solid;
  margin-top: 0;
  overflow: hidden;
  padding-left: #{2 * $searchPadding};
}

#search {
  width: 100%;

  #searchbox {
    width: calc(100% - #{$searchButtonWidth} - #{$searchButtonMargin});
    height: $searchButtonWidth;
    padding: 5px 10px;
    box-sizing: border-box;
  }
}

#translationHandler {
  width: 40%;
  text-align: right;
  margin-bottom: 10px;
}

.icoButton {
  width: $searchButtonWidth;
  margin-left: $searchButtonMargin;
  height: $searchButtonWidth;
  padding: 3px;

  [class *= " icofont-"],[class ^= "icofont-"] {
    font-size: 1.25em;
  }
}

.miniButton {
  width: intdiv($searchButtonWidth, 2);
  height: intdiv($searchButtonWidth, 2);
  padding: 0;

  [class *= " icofont-"],[class ^= "icofont-"] {
    font-size: 0.8em;
    position: relative;
    top: -2px;
  }
}

#header {
  height: $headerHeight;
}

#tlConHeader {
  height: 40px;
}

#header, #tlConHeader {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
  width: 100%;

  #title {
    width: 40%;
  }
}

#headerSpace {
  position:relative;
  margin-top: -30px;
  margin-bottom: 5px;
  width: 100%;
}

#loading {
  width: 300px;
  height: 300px;
  border-width: 0;
  border-radius: 20px;
  background-attachment: fixed;
  background-repeat: no-repeat;
  background-position: center;
  background-size: 150px;
  position: fixed;
  left: calc(50% - 150px);
  top: calc(50% - 150px);
  z-index: $effectivelyMaxInt;
}

.dark {
  #loading {
    background-image: url("../images/bookloading.gif");
  }
}

.light {
  #loading {
    background-image: url("../images/bookloading_light.gif");
  }
}
//#endregion

//#region Basic classes
.hidden {
  display: none !important;
}
//#endregion

//#region Menu
.active .sidebar, .active .menu-tab {
  transform: translate3d(-$sidebarWidth, 0, 0);
}

.tab-button {
  //width: $tabIconSize;
  //height: $tabIconSize;
  position: absolute;
  right: intdiv($tabIconPosition, 2) + $tabRightOffset;
  top: intdiv($tabIconPosition, 2);
  z-index: $menuButtonZIndex;
  margin: auto;
}

#menu-button {
  background-image: url("../images/menubutton.svg");
}

#dict-button {
  background-image: url("../images/dictbutton.svg");
}

#ref-button {
  background-image: url("../images/crossref.svg");
}

.menu-tab {
  position: fixed;
  z-index: $menuTabZIndex;
  right: -$tabRightOffset;
  width: #{$tabSize + $tabRightOffset};
  height: $tabSize;
  transition: transform $menuChangeTime;
  border-top-left-radius: $tabBorderRadius;
  border-bottom-left-radius: $tabBorderRadius;
  border: $menuBorderWidth solid;
}

#menu-btn-wrap {
  top: $tabTopSpace;
}

#dict-btn-wrap {
  //top: $tabDictPosition;
}

#crossref-btn-wrap {
  //top: $tabRefsPosition;
}

.sidebar {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 100%;
  z-index: $menuDeactivatedZIndex;
  transition: transform 1s;
  width: $sidebarWidth;
  border-left: $menuBorderWidth solid;
  padding-top: $sidebarTopPadding;
}

.sidebar.activated {
  z-index: $menuActivatedZIndex;
}

#menu ul {
  list-style-type: none;
  width: $menuListWidth;
  right: 0;
  padding: 0;
  position: absolute;
  margin-top: 0;
}

#menu ul li {
  width: 100%;
  padding-left: $menuListItemBigSpace;
  padding-top: $menuListItemLittleSpace;
  padding-bottom: $menuListItemLittleSpace;
  margin-top: $menuListItemBigSpace;
  transition: background $menuButtonChangeTime ease-in;
  right: 0;
}

.sidebar a {
  vertical-align: middle;
  display: inline-block;
  width: 100%;
  margin: auto;
  text-decoration: none;
}

#menu ul li input, #menu ul li label {
  vertical-align: middle;
  position: relative;
}

.sidebar a:active, .sidebar a:hover, .sidebar a:visited {
  text-decoration: none;
}

#dictionary, #crossref {
  margin-bottom: $sidebarBottomMargin;
  padding-left: $sidebarLeftPadding;
  overflow-y: auto;
  overflow-x: hidden;
}

#menubottom {
  top: unset;
  bottom: $sidebarBottomSpace;
  height: $sidebarBottomSize;
  text-align: center;
  z-index: $menuTabZIndex;
}
//#endregion

//#region Translation classes
#addtl, .del, .promote, #prevPsg, #nextPsg {
  /*position: absolute;*/
  /*top: 5px;*/
  cursor: pointer;
  background-origin: content-box;
  float: right;
}

#addtl, #prevPsg, #nextPsg {
  margin-top: 0;
}

#addtl {
  /*right: 85px;*/
  background-image: url("../images/grey_plus_icon.png");
  background-repeat: no-repeat;
  padding-right: 5px;
  border-right: 1px solid $borderColor;
  padding-left: 5px;
  width: 30px;
  height: 30px;
}

#prevPsg {
  /*right: 45px;*/
  background-image: url("../images/grey_left_icon.png"); /* change to correct icon */
  margin-left: 5px;
  margin-right: 5px;
  width: 30px;
  height: 30px;
}

#nextPsg {
  /*right: 15px;*/
  background-image: url("../images/grey_right_icon.png"); /* change to correct icon */
  width: 30px;
  height: 30px;
}

div.del {
  right: 10px;
  background-image: url("../images/grey_minus_icon.png");
  width: 30px;
  height: 30px;
}

div.promote {
  right: 43px;
  background-image: url("../images/grey_up_icon.png");
  width: 30px;
  height: 30px;
}

div.del span::before {
  content: "Remove this translation";
}

div.promote span::before {
  content: "Make this the primary translation";
}

#addtl span::before {
  content: "Add another translation";
}

#prevPsg span::before {
  content: "Last passage";
}

#nextPsg span::before {
  content: "Next passage";
}

div.del span, div.promote span, #addtl span, #prevPsg span, #nextPsg span {
  display: none;
  position: relative;
  top: 31px;
  left: -80px;
  right: 0;
  border: 1px solid;
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);
  padding: 1px 2px 1px 2px;
  z-index: 1;
  width: 100px;
}

div.del:hover span, div.promote:hover span, #addtl:hover span, #prevPsg:hover span, #nextPsg:hover span {
  display: block;
  transform-origin: 100% 0;
  -webkit-animation: fadeIn 0.3s ease-in-out;
  animation: fadeIn 0.3s ease-in-out;
}

//#region Outdated code -- remove when confirmed unused
.modal {
  position: fixed;
  z-index: 50;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgb(0,0,0);
  background-color: rgba(0,0,0,0.4);
}

.modal-content {
  border: 1px solid;
  border-radius: 3px;
  width: 240px;
  margin: 10% auto;
  padding: 10px 20px 30px 20px;
}

.modal-content select {
  width: 80%;
  margin-left: 20px;
}

.modal-content input {
  float: right;
  font-weight: bold;
  clear: none;
  margin-top: 5px;
  margin-right: 5px;
}
//#endregion


@-webkit-keyframes fadeIn {
  0% {
    opacity:0;
    transform: scale(0.6);
  }

  100% {
    opacity:100%;
    transform: scale(1);
  }
}

@keyframes fadeIn {
  0% { opacity:0; }
  100% { opacity:100%; }
}
//#endregion

//#region Box classes
.boxHolder {
  position: relative;
  border-collapse: collapse;
  display: flex;
  flex-flow: row wrap;
  border: 1px solid $borderColor;
}

.box {
  position: relative;
  border-collapse: collapse;
  overflow: hidden;
  padding-bottom: 25px;
}

.noTextBox {
  position: relative;
  margin: 10px auto;
  padding: 5px;
  border: 3px ridge $warningBorder;
  clear: both;
  background-color: rgba(255,0,0,0.2);
}

.scrollbox {
  height: 100%;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 0 5px;
}

.scrollbox h4 {
  float:left;
}

.scrollbox p {
  clear: both;
}

@for $b from 1 through 6 {
  @if ($b <= 3) {
    .of#{$b} {
      width: intdiv(1194px, $b);
    }
  } @else if ($b == 5) {
    .of#{$b}:nth-child(-n + 2) {
      width: 597px;
    }
    .of#{$b}:nth-last-child(-n + 3) {
      width: 398px;
    }
  } @else {
    .of#{$b} {
      width: intdiv(1194px, intdiv($b, 2));
    }
  }

  .of#{$b} {
    height: calc((90% - 1.5em) / (1 + #{intdiv($b, 4)}));
    border: 1px solid black; //TODO: color?
    margin: -0.5px;
    overflow: hidden;
    padding: $sectionPadding 0 $sectionPadding $sectionPadding;
    box-sizing: border-box;
    direction: ltr;
    position: relative;
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    justify-content: space-between;

    .rtl {
      direction: rtl;
    }

    .textArea {
      height: 100%;
      overflow-y: auto;
      padding-right: $sectionPadding;
    }
  }
}
//TODO: figure out why there's a vertical collapse
// TODO: scroll shadow!
.resultNotice {
  width: calc(100% + #{$sectionPadding - $noticeLeftMargin});
  padding: $sectionPadding;
  box-sizing: border-box;
  border-top: 1px solid black; //TODO: color!
  background-color: yellow; // TODO: color!
  order: 99;
  margin-left: $noticeLeftMargin;
  margin-bottom: $noticeBottomMargin;
}
//#endregion

//#region Diff classes
.diff {
  position: absolute;
  right: 0;
  bottom: 0;
  width: 100%;
  text-align: right;
  padding: 5px;
  height: 15px;
  background: azure;
  font-style: italic;
  font-size: 0.8em;
}

.diff input, .diff label {
  margin: auto 2px;
}
//#endregion

/* -------------------- */
/* --- MEDIA CLASSES -- */
/* -------------------- */
$screenHeights: 480px, 600px, 768px, 800px, 900px, 1024px, 1050px, 1080px, 2000px, 3000px, 4000px, 5000px;
@each $height in $screenHeights {
  @media screen and (min-height: $height) {
    .results {
      height: #{$height - $headerHeight - $pageMargin};
    }
  }
}

@media screen and (max-height: list.nth($screenHeights, 1)) {
  .results {
    height: 100%; // this will make child divs size by content
  }
}


@media screen and (min-width: 2000px) {
  body {
    background-image: $largeBackground;
  }
}

@media screen and (max-width: 2000px) {
  body {
    background-image: $mediumBackground;
  }
}

@media screen and (max-width: 1300px) {
  body {
    background-image: $smallBackground;
  }
}

@media screen and (max-width: 1064px) {
  body {
    background-image: $tinyBackground;
  }
}

@media screen and (max-width: 800px) {
  body {
    background-image: url("../images/bg_800.png");
  }
}

@media screen and (max-width: 600px) {
  body {
    background-image: url("../images/bg_600.png");
  }
}

@media screen and (max-width: 400px) {
  body {
    background-image: url("../images/bg_400.png");
  }
}

//#region Popup
.popup {
  position: fixed;
  left: calc(50% - #{intdiv($popupWidth, 2)});
  top: calc(50% - #{intdiv($popupHeight, 2)});
  z-index: intdiv($effectivelyMaxInt, 2);
  border-radius: $popupBorderRadius;
  width: $popupWidth;
  height: $popupHeight;
}

#translationController {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  padding: $tboxGridBoxPadding;

  #tlConHeader {
    flex-basis: 100%;

    h3 {
      margin: 0;
    }
  }

  #translGrid {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;

    flex-grow: 3;
    flex-basis: 50%;
    height: 90%;

    .tlBox {
      flex-basis: 33%;
      height: 50%;
      text-align: center;
      box-sizing: border-box;
      padding: $tboxGridBoxPadding;

      &.occupied {
        outline: aliceblue solid 1px;
      }

      &.potentialTl {
        outline: aliceblue dashed 2px;
      }

      div {
        display: inline-block;
        @include verticalAlign(relative);
      }
    }

    .transl {
      display: inline-block;
    }
  }

  #translList {
    flex-grow: 1;
    flex-basis: 33%;
    overflow-y: auto;
    overflow-x: hidden;

    .transl {
      display: list-item;
      list-style-type: circle;
      margin-left: 25px;
    }
  }

  .langGroup {
    text-align: center;

    &::before, &::after {
      content: '—';
      margin-left: 10px;
      margin-right: 10px;
    }
  }
}

[draggable='true'] {
  cursor: grab;

  &:active {
    cursor: grabbing;
  }
}
//#endregion



// TODO: have RTL languages actually go RTL